# Import the database object (db) from the main application module
# We will define this inside /app/__init__.py in the next sections.
from app import db
from datetime import datetime

from sqlalchemy import Table, Column, Integer, ForeignKey
from sqlalchemy.orm import relationship, backref
from sqlalchemy.ext.declarative import declarative_base

# Define a base model for other database tables to inherit
class Base(db.Model):

    __abstract__  = True
    id      = Column(db.Integer, primary_key=True)
    created = Column(db.DateTime, default=datetime.utcnow, nullable=False)
    updated = Column(db.DateTime, default=datetime.utcnow, nullable=False)

#pubassociation = Table('pubassociation', Base.metadata,
#    Column('series_id', Integer, ForeignKey('series.id')),
#    Column('publisher_id', Integer, ForeignKey('publisher.id'))
#)

issueteams = Table('issueteams', Base.metadata,
    Column('teams_id', Integer, ForeignKey('team.id')),
    Column('issue_id', Integer, ForeignKey('issue.id'))
)

issuecreators = Table('issuecreators', Base.metadata,
    Column('creators_id', Integer, ForeignKey('creator.id')),
    Column('issue_id', Integer, ForeignKey('issue.id'))
)

#issuearcs = Table('issuearcs', Base.metadata,
#    Column('arcs_id', Integer, ForeignKey('arc.id')),
#    Column('issue_id', Integer, ForeignKey('issue.id'))
#)

issuecharacters = Table('issuecharacters', Base.metadata,
    Column('characters_id', Integer, ForeignKey('character.id')),
    Column('issue_id', Integer, ForeignKey('issue.id'))
)

characterteams = Table('characterteams', Base.metadata,
    Column('characters_id', Integer, ForeignKey('character.id')),
    Column('teams_id', Integer, ForeignKey('team.id'))
)

#seriesarcs = Table('seriesarcs', Base.metadata,
#    Column('arcs_id', Integer, ForeignKey('arc.id')),
#    Column('series_id', Integer, ForeignKey('series.id'))
#)

# Define a User model
class LibraryFolders(Base):

    __tablename__ = 'library'

    # Identification Data: email & password
    #folder    = Column(db.String(128),  nullable=False)

    # New instance instantiation procedure
    def __init__(self, folder):

        self.folder    = folder

    def __repr__(self):
        return '<Folder %r>' % (self.folder)

# Define ComicPages model
class ComicPages(Base):

    __tablename__ = 'comicpages'

    # Identification Data: email & password
    name    = Column(db.String(128),  nullable=False)
    page    = Column(db.Integer)
    comicid = Column(db.Integer)

    # New instance instantiation procedure
    def __init__(self, name, page, comicid):

        self.name = name
        self.page = page
        self.comicid = comicid

    def __repr__(self):
        return '<Comic %r>' % (self.name)

#class Arc(Base):
#    #series = relationship("Issue", secondary=seriesarcs,back_populates="arcs")
#    issues = relationship("Issue", secondary=issuearcs,back_populates="arcs")
#    cvid = Column(db.String(15))
#    cvurl = Column(db.String(200))
#    name = Column(db.String(200))
#    desc = Column(db.String(500))
#    image = Column(db.String(255))
#
#    def __str__(self):
#        return self.name

class Team(Base):
    issues = relationship("Issue", secondary=issueteams,back_populates="teams")
    characters = relationship("Character", secondary=characterteams,back_populates="")
    cvid = Column(db.String(15))
    cvurl = Column(db.String(200))
    name = Column(db.String(200))
    desc = Column(db.String(500))
    image = Column(db.String(255))

    def __str__(self):
        return self.name

class Character(Base):
    issues = relationship("Issue", secondary=issuecharacters,back_populates="characters")
    teams = relationship("Team", secondary=characterteams,back_populates="characters")
    cvid = Column(db.String(15))
    cvurl = Column(db.String(200))
    name = Column(db.String(200))
    desc = Column(db.String(500))
    #teams = db.ManyToManyField(Team)
    image = Column(db.String(255))

    def __str__(self):
        return self.name

class Creator(Base):
    issues = relationship("Issue", secondary=issuecreators,back_populates="creators")
    cvid = Column(db.String(15))
    cvurl = Column(db.String(200))
    name = Column(db.String(200))
    desc = Column(db.String(500))
    image = Column(db.String(255))

    def __str__(self):
        return self.name

class Publisher(Base):
    cvid = Column(db.String(15))
    cvurl = Column(db.String(200))
    name = Column(db.String(200))
    desc = Column(db.String(500))
    logo = Column(db.String(255))
    series_id = Column(Integer, ForeignKey('series.id'))
    series = relationship("Series")

    def __str__(self):
        return self.name

class Series(Base):
    #issues = relationship("Issue", secondary=issueseries,back_populates="series")
    issues = relationship("Issue", back_populates="series")
    cvid = Column(db.String(15))
    cvurl = Column(db.String(200))
    name = Column(db.String(200))
    #publishers = Column(Integer, ForeignKey('publisher.id'))
    #publishers = relationship("Publisher", secondary=pubassociation, back_populates="series")
    #publisher_id = Column(Integer, ForeignKey('publisher.id'))
    #publisher = relationship("Publisher")
    #id = Column(Integer, primary_key=True)
    #publisher = db.ForeignKey(Publisher, on_delete=db.CASCADE, null=True)
    year = Column(db.Integer)
    desc = Column(db.String(500))

    def __str__(self):
        return self.name

    def issue_numerical_order_set(self):
        return self.issue_set.all().order_by('number')

    class Meta:
        verbose_name_plural = "Series"

class Issue(Base):
    __tablename__ = 'issue'
    #series = relationship("Series", secondary=issueseries,back_populates="issues")
    series_id = Column(Integer, ForeignKey('series.id'))
    series = relationship("Series", back_populates="issues")
    arcs = relationship("Arc", secondary=issuearcs,back_populates="issues")
    characters = relationship("Character", secondary=issuecharacters,back_populates="issues")
    creators = relationship("Creator", secondary=issuecreators,back_populates="issues")
    teams = relationship("Team", secondary=issueteams,back_populates="issues")
    cvid = Column(db.String(15))
    cvurl = Column(db.String(200))
    #series = db.ForeignKey(Series, on_delete=db.CASCADE)
    name = Column(db.String(200))
    number = Column(db.Integer)
    date = Column(db.Integer)
    desc = Column(db.String(500))
    #arcs = db.ManyToManyField(Arc)
    #characters = db.ManyToManyField(Character)
    #creators = db.ManyToManyField(Creator)
    #teams = db.ManyToManyField(Team)
    file = Column(db.String(255))
    cover = Column(db.String(255))
    image_icon_url = Column(db.String(255))
    image_medium_url = Column(db.String(255))
    image_tiny_url = Column(db.String(255))
    image_small_url = Column(db.String(255))
    image_thumb_url = Column(db.String(255))
    image_screen_url = Column(db.String(255))
    image_super_url = Column(db.String(255))
    image_icon = Column(db.String(255))
    image_medium = Column(db.String(255))
    image_tiny = Column(db.String(255))
    image_small = Column(db.String(255))
    image_thumb = Column(db.String(255))
    image_screen = Column(db.String(255))
    image_super = Column(db.String(255))
    filepath    = Column(db.String(128),  nullable=False)
    filename    = Column(db.String(128))

    # Which page has been read. Starts at 0.
    read    = Column(db.Integer)

    # New instance instantiation procedure
    def __init__(self, filename, filepath):

        self.filename    = filename
        self.filepath    = filepath
        self.read    = 0

    def __str__(self):
        return self.name

    def get_absolute_url(self):
        return reverse('author-detail', kwargs={'pk': self.pk})

    def page_set(self):
        comicfilehandler = ComicFileHandler()
        comic = comicfilehandler.extract_comic(self.file, self.id)

class Settings(Base):
    api_key = Column(db.String(40))
    def __str__(self):
        return "Settings"

